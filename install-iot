#!/bin/bash

# ToDo: This only works on Avnet Gateway -- add checks for HW

if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root"
  exit 1
fi

# Update dependencies
add_pkg="hostapd dnsmasq dnsutils pydb anacron busybox git libusb-dev nmap udhcpc"
remove_pkg="apache2"

files_for_copy=(
    "dhcpcd.conf* /etc/" \
    "sudoers /etc/" \
    "profile /etc/" \
    "dnsmasq.conf* /etc/" \
    "default.script /usr/share/udhcpc/" \
    "hostapd* /etc/default/" \
    "hostapd* /etc/hostapd/" \
    "*.service /etc/systemd/system/" \
    "rsyslog.conf /etc/" \
    "logrotate.conf /etc/" \
    "ignore-*.conf /etc/rsyslog.d/" \
    "99-attiny.rules /etc/udev/rules.d/" \
    "rsyslog /etc/logrotate.d/" \
    "iotconnect /etc/logrotate.d/" \
    "rc.local* /etc/" \
    "default.script /usr/share/udhcpc/" \
    "quectel-CM /usr/local/bin/" \
)

files_for_removal=(
    "/etc/systemd/system/quectel-service.sh" \
    "/opt/avnet-iot/utilities/github" \
)

scriptdir=$(cd "$(dirname "$0")" && pwd)
push_dir () { pushd $1 > /dev/null; }
pop_dir () { popd $1 > /dev/null; }

apt_upgrade ()
{
    apt-mark hold raspberrypi-bootloader
    apt-mark hold raspberrypi-kernel
    apt-mark hold raspberrypi-sys-mods
    apt-get purge -y 'php*'
    apt-get purge -y 'apache*'
    apt autoremove -y
    apt update
    apt upgrade -y
}

deps_install ()
{
    apt update -y
    apt remove -y $remove_pkg
    apt install -y $add_pkg
}

copy_files ()
{
    push_dir "$scriptdir/files"

    chown root:root *
    mkdir /usr/share/udhcpc
    for i in "${files_for_copy[@]}"
    do
        cp -aRfv ${i}
    done

    pop_dir
}

remove_files ()
{
    for i in "${files_for_removal[@]}"
    do
        [[ -e ${i} ]] && { rm -R ${i}; }
    done
}

extract_files ()
{
    if [[ ! -d "/opt/avnet-iot" ]]; then
        tar oxf avnet-iot.tar.gz -C /opt
    else
        echo "Avnet IoTConnect already installed, not overwriting."
    fi
}

python_updates ()
{
    push_dir "$scriptdir/pip"

    pip uninstall -y iotconnect-sdk-py2.7
    pip install iotconnect-sdk-2.0.tar.gz

    pip install -r wheelhouse/requirements.txt --no-index --find-links wheelhouse

    pop_dir
}

install_drivers ()
{
    push_dir "$scriptdir/drivers"

    files=(install_driver*)
    for i in "${files[@]}"
    do
        out=$(/bin/bash -c "./${i}")
        echo $out
    done

    pop_dir
}

create_avnet_user ()
{
    if [ ! -d /home/avnet ]; then
        deluser avnet
        useradd -m -d /home/avnet -g avnet -G root,crontab,adm,tty,dialout,sudo,ssh,iotedge,tss,gpio,i2c -s /bin/bash avnet
        cat /opt/avnet-iot/iotservices/default.txt | chpasswd
    else
        usermod -g crontab avnet
        usermod -g netdev avnet
        usermod -g spi avnet
    fi
}

create_fixed_file_log_size ()
{
    local size="$1"
    local file="$2"

    [[ -z $size ]] && { size="100"; }
    [[ -z $file ]] && { file="/logs.img"; }

    local fstab="$file       /var/log        ext4    loop                       0       0"

    if [[ ! -f $file ]]; then
        echo "Reserving $size MB for logging: $file"
        systemctl stop syslog.socket rsyslog.service
        rm -rf /var/log/*
        dd if=/dev/zero of=$file bs=1M count=$size > /dev/null
        mkfs -t ext4 /logs.img > /dev/null
    fi

    if ! grep -Eq "/var/log" /etc/fstab; then
        echo "$fstab" >> /etc/fstab
    fi
}

enable_wifi_ap_mode ()
{
    rm /etc/wpa_supplicant/wpa_supplicant.conf
    cp /etc/default/hostapd.ap /etc/default/hostapd
    cp /etc/dhcpcd.conf.ap /etc/dhcpcd.conf
    cp /etc/dnsmasq.conf.ap /etc/dnsmasq.conf

    ln -s /opt/avnet-iot/services/bootservice.service /etc/systemd/system/bootservice.service
    ln -s /opt/avnet-iot/services/attinyupdate.service /etc/systemd/system/attinyupdate.service

    systemctl disable iotconnectservice
    systemctl stop wpa_supplicant
    systemctl disable wpa_supplicant

    systemctl daemon-reload
    systemctl enable dnsmasq hostapd
    systemctl enable attinyupdate bootservice quectel hwclock-start buttonservice ledservice restservice
}

restore_reboot ()
{
    rm /sbin/reboot
    ln -s /bin/systemctl /sbin/reboot
}

pkill startup.sh
pkill python
apt_upgrade
deps_install
remove_files
extract_files
copy_files
python_updates
install_drivers
create_fixed_file_log_size 100
#create_avnet_user
enable_wifi_ap_mode
restore_reboot

read -p "Installation complete, press ENTER to reboot"
cd ..
rm -R avtse-iiotg-upgrade
reboot
